---
title: "Class 06: R Functions"
author: "Lance Boling"
format: pdf
---

```{r}
student1 <- c(100, 100, 100, 100, 100, 100, 100, 90)
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)
```

```{r}
 (sum(student1)- min(student1))/7
```
Or
```{r}
mean(student1[-which.min(student1)])
```
to exclude NA values from Student2:
```{r}
mean(student2[-which.min(student2)], na.rm=TRUE)
```
to assign Student to as "x"
```{r}
x <- student2
x
```
ChatGPT: "To convert NA (missing) values to zero in R, you can use the is.na() function to identify the missing values and then use logical indexing to replace them with zeros."
```{r}
x <- student3
x[is.na(x)] <- 0
mean(x[-which.min(x)], na.rm=TRUE)
```
Now x can be changed to whichever student we want to grade.

Q1. Write a function grade() to determine an overall grade from a vector of student homework
assignment scores dropping the lowest single score. If a student misses a homework (i.e. has an
NA value) this can be used as a score to be potentially dropped. Your final function should be
adquately explained with code comments and be able to work on an example class gradebook
such as this one in CSV format: “https://tinyurl.com/gradeinput” [3pts]
```{r}
grade <- function(x) {
  #convert/Mask NA values to zero
  x[is.na(x)] <- 0
  #drop lowest score and get the mean. Note na.rm=TRUE is not required since NA was assigned to 0
  mean(x[-which.min(x)])
}
```
To read the gradebook and convert first row to names:
```{r}
gradebook <- read.csv("https://tinyurl.com/gradeinput", row.names=1)
gradebook
```
To Use the apply command to perform a batch function on all grades:
```{r}
apply(gradebook, MARGIN=1, grade)

#Note: instead of MARGIN=1 could just use a "1".  2 would average columns and 3 averages rows and columns.
```
Q2. Using your grade() function and the supplied gradebook, Who is the top scoring student
overall in the gradebook? [3pts]
```{r}
which.max(apply(gradebook, MARGIN=1, grade))
```
Could also assign the "answer" to ans so we can easily query the results
```{r}
ans <- apply(gradebook, MARGIN=1, grade)
which.max(ans)
```
Q3. From your analysis of the gradebook, which homework was toughest on students (i.e. obtained
the lowest scores overall? [2pts] -->change the margin to columns (2).  However this still drops the lowest score which skews the result
```{r}
which.min(apply(gradebook, MARGIN=2, grade))
```
instead:
```{r}
mask <- gradebook
mask[is.na(mask)] <- 0
hw.ave <- (apply(mask, 2, mean))
which.min(hw.ave)
```
We could also sum the columns and then choose the lowest to determine the lowest scoring quiz:
```{r}
gradebook[is.na(gradebook)] <- 0
which.min(apply (gradebook, 2, sum))

```


Q4. Optional Extension: From your analysis of the gradebook, which homework was most
predictive of overall score (i.e. highest correlation with average grade score)? [1pt]
```{r}
cor(mask$hw4, ans)

apply(mask, 2, cor, y=ans)
#then can find which is the most correlated with which.max
which.max(apply(mask, 2, cor, y=ans))
```
```{r}
df <- data.frame(a=1:10, b=seq(200,400,length=10),c=11:20,d=NA)
df
(df$a - min(df$a)) / (max(df$a) - min(df$a))
#a function for analysis (alys) that can perform the above code
alys <- function(x){
    (x-min(x)) / (max(x) - min(x))
}

```


